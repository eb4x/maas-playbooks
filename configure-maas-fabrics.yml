---
- name: get existing fabrics
  uri:
    url: "{{ maas_base }}/MAAS/api/2.0/fabrics/"
    headers:
      Authorization: "{{ Authorization }}"
    return_content: true
  register: _existing_fabrics

- name: manipulate fabrics
  when: maas_fabric_names | symmetric_difference(existing_fabric_names) | length
  vars:
    maas_fabric_names: "{{ maas_network.fabrics | map(attribute='name') + maas_network.fabrics | map(attribute='remap') }}"
    existing_fabric_names: "{{ _existing_fabrics.json | map(attribute='name') }}"
  block:
    - name: delete fabrics
      when:
        - fabric.name not in maas_fabric_names
      changed_when: true
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/fabrics/{{ fabric.id }}/"
        method: DELETE
        headers:
          Authorization: "{{ Authorization }}"
        status_code: [200, 204]
      loop: "{{ _existing_fabrics.json }}"
      loop_control:
        loop_var: fabric
        label: "fabric: {{ fabric.name }}"
      register: _delete_fabric

    - name: update fabrics
      when:
        - fabric.remap is defined
        - fabric.remap in existing_fabric_names
      changed_when: true
      vars:
        comparison_fabric: "{{ _existing_fabrics.json | selectattr('name', 'eq', fabric.remap) | first }}"
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/fabrics/{{ comparison_fabric.id }}/"
        method: PUT
        headers:
          Authorization: "{{ Authorization }}"
        body:
          name: "{{ fabric.name }}"
        body_format: json
      loop: "{{ maas_network.fabrics }}"
      loop_control:
        loop_var: fabric
        label: "fabric: {{ fabric.name }}"
      register: _update_fabric

    - name: create fabrics
      when:
        - fabric.name not in existing_fabric_names
        - fabric.remap | default('') not in existing_fabric_names
      changed_when: true
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/fabrics/"
        method: POST
        headers:
          Authorization: "{{ Authorization }}"
        body:
          name: "{{ fabric.name }}"
        body_format: json
      loop: "{{ maas_network.fabrics }}"
      loop_control:
        loop_var: fabric
        label: "fabric: {{ fabric.name }}"
      register: _create_fabric

    - name: refresh existing fabrics
      when: _create_fabric is changed or _update_fabric is changed or _delete_fabric is changed
      changed_when: true
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/fabrics/"
        headers:
          Authorization: "{{ Authorization }}"
        return_content: true
      register: _refresh_fabrics

    - name: workaround skipped refresh
      when: _refresh_fabrics is not skipped
      changed_when: true
      set_fact:
        _existing_fabrics: "{{ _refresh_fabrics }}"

- name: get existing vlans
  vars:
    comparison_fabric: "{{ _existing_fabrics.json | selectattr('name', 'eq', fabric.name) | first }}"
  uri:
    url: "{{ maas_base }}/MAAS/api/2.0/fabrics/{{ comparison_fabric.id }}/vlans/"
    headers:
      Authorization: "{{ Authorization }}"
    return_content: true
  loop: "{{ maas_network.fabrics }}"
  loop_control:
    loop_var: fabric
    label: "fabric: {{ fabric.name }}"
  register: _existing_vlans_tmp

- name: workaround, sum existing vlans
  set_fact:
    _existing_vlans:
      json: "{{ _existing_vlans.json | default([]) + item.json }}"
  loop: "{{ _existing_vlans_tmp.results }}"
  loop_control:
    label: "fabric: {{ item.fabric.name }}"

- name: manipulate vlans
  vars:
    existing_vlan_ids: "{{ _existing_vlans.json | map(attribute='vid') }}"
  block:
    - name: create all_maas_fabric_vlans data structure
      set_fact:
        all_maas_fabric_vlans: "{{ all_maas_fabric_vlans | default([]) + [{ 'fabric_id' : fabric_id | int, 'vid' : fabric_vlan.1.id }] }}"
      vars:
        fabric_id: "{{ (_existing_fabrics.json | selectattr('name', 'eq', fabric_vlan.0.name) | first).id }}"
      loop: "{{ maas_network.fabrics | subelements('vlans') }}"
      loop_control:
        loop_var: fabric_vlan
        label: "fabric: {{ fabric_vlan.0.name }}, vlan: {{ fabric_vlan.1.id }}"

    - name: delete vlans
      when:
        - vlan.name != 'untagged'
        - vlan | json_query(comparison_data) not in all_maas_fabric_vlans
      changed_when: true
      vars:
        comparison_data: "{fabric_id: fabric_id, vid: vid}"
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/fabrics/{{ vlan.fabric_id }}/vlans/{{ vlan.vid }}/"
        method: DELETE
        headers:
          Authorization: "{{ Authorization }}"
        status_code: [200, 204]
      loop: "{{ _existing_vlans.json }}"
      loop_control:
        loop_var: vlan
        label: "fabric: {{ (_existing_fabrics.json | selectattr('id', 'eq', vlan.fabric_id) | first).name }}, vlan: {{ vlan.vid }}"
      register: _delete_vlans

    - name: update vlans
      when:
        - _existing_vlans.json | json_query(contains_fabric_vlan) | length
        - fabric_vlan.1.name != comparison_vlan.name or
          fabric_vlan.1.mtu | default(1500) != comparison_vlan.mtu
      changed_when: true
      vars:
        fabric_id: "{{ (_existing_fabrics.json | selectattr('name', 'eq', fabric_vlan.0.name) | first).id }}"
        contains_fabric_vlan: "[?fabric_id==`{{ fabric_id }}` && vid==`{{ fabric_vlan.1.id }}`]"
        comparison_vlan: "{{ _existing_vlans.json | json_query(contains_fabric_vlan) | first }}"
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/fabrics/{{ fabric_id }}/vlans/{{ fabric_vlan.1.id }}/"
        method: PUT
        headers:
          Authorization: "{{ Authorization }}"
        body:
          name: "{{ fabric_vlan.1.name }}"
          mtu: "{{ fabric_vlan.1.mtu | default(1500) }}"
        body_format: json
      loop: "{{ maas_network.fabrics | subelements('vlans') }}"
      loop_control:
        loop_var: fabric_vlan
        label: "fabric: {{ fabric_vlan.0.name }}, vlan: {{ fabric_vlan.1.id }}"
      register: _update_vlans

    - name: create vlans
      when:
        - _existing_vlans.json | json_query(contains_fabric_vlan) | length == 0
      changed_when: true
      vars:
        fabric_id: "{{ (_existing_fabrics.json | selectattr('name', 'eq', fabric_vlan.0.name) | first).id }}"
        contains_fabric_vlan: "[?fabric_id==`{{ fabric_id }}` && vid==`{{ fabric_vlan.1.id }}`]"
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/fabrics/{{ fabric_id }}/vlans/"
        method: POST
        headers:
          Authorization: "{{ Authorization }}"
        body:
          name: "{{ fabric_vlan.1.name }}"
          vid: "{{ fabric_vlan.1.id }}"
          mtu: "{{ fabric_vlan.1.mtu | default(1500) }}"
        body_format: json
      loop: "{{ maas_network.fabrics | subelements('vlans') }}"
      loop_control:
        loop_var: fabric_vlan
        label: "fabric: {{ fabric_vlan.0.name }}, vlan: {{ fabric_vlan.1.id }}"
      register: _create_vlans

    - name: refresh existing vlans
      when: _create_vlans is changed or _update_vlans is changed or _delete_vlans is changed
      changed_when: true
      vars:
        comparison_fabric: "{{ _existing_fabrics.json | selectattr('name', 'eq', fabric.name) | first }}"
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/fabrics/{{ comparison_fabric.id }}/vlans/"
        headers:
          Authorization: "{{ Authorization }}"
        return_content: true
      loop: "{{ maas_network.fabrics }}"
      loop_control:
        loop_var: fabric
        label: "fabric: {{ fabric.name }}"
      register: _refresh_vlans

    - name: workaround skipped refresh
      when: _refresh_vlans is not skipped
      changed_when: true
      set_fact:
        _existing_vlans:
          json: "{{ _existing_vlans.json | default([]) + item.json }}"
      loop: "{{ _refresh_vlans.results }}"
      loop_control:
        label: "fabric: {{ item.fabric.name }}"

- name: get existing subnets
  uri:
    url: "{{ maas_base }}/MAAS/api/2.0/subnets/"
    headers:
      Authorization: "{{ Authorization }}"
    return_content: true
  register: _existing_subnets

- debug:
    var: _existing_subnets.json

# There's a limitation in MAAS, where you can't have the same subnet.cidr in multiple vlans,
# yet you can have the same vlan.id in multiple fabrics. Because of this, I shall now impose
# further limitations. I'm not gonna figure out which fabric/vlan.id combo a subnet belongs
# to. It's going in the first.

# There's probably no good way to do subelements of subelements? So you're left with
# something like this, `fabrics | json_query(q1)` to keed track of the nesting.
# q1: "[].{name: name, vlans: vlans[].{id: id, subnets: subnets[?cidr==`192.168.51.0/24`]}}"
- name: manipulate subnets
  block:
    - name: delete subnets
      when: subnet.cidr not in all_maas_cidrs
      changed_when: true
      vars:
        all_maas_vlans: "{{ maas_network.fabrics | map(attribute='vlans') | flatten }}"
        all_maas_subnets: "{{ all_maas_vlans | selectattr('subnets', 'defined') | map(attribute='subnets') | flatten }}"
        all_maas_cidrs: "{{ all_maas_subnets | map(attribute='cidr') }}"
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/subnets/{{ subnet.id }}/"
        method: DELETE
        headers:
          Authorization: "{{ Authorization }}"
        status_code: [200, 204]
      loop: "{{ _existing_subnets.json }}"
      loop_control:
        loop_var: subnet
        label: "fabric: {{ subnet.vlan.fabric }}, vlan: {{ subnet.vlan.vid }}, subnet: {{ subnet.cidr }}"
      register: _delete_subnets

    - name: update subnets
      when:
        - vlan_subnet.1.cidr in existing_subnet_cidrs
        - vlan_subnet.0.id != comparison_subnet.vlan.vid
      changed_when: true
      vars:
        all_maas_vlans: "{{ maas_network.fabrics | map(attribute='vlans') | flatten }}"
        existing_subnet_cidrs: "{{ _existing_subnets.json | map(attribute='cidr') }}"
        comparison_subnet: "{{ _existing_subnets.json | selectattr('cidr', 'eq', vlan_subnet.1.cidr) | first }}"
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/subnets/{{ comparison_subnet.id }}/"
        method: PUT
        headers:
          Authorization: "{{ Authorization }}"
        body:
          vlan: "{{ (_existing_vlans.json | selectattr('vid', 'eq', vlan_subnet.0.id) | first).id }}"
        body_format: json
        return_content: true
      loop: "{{ all_maas_vlans | selectattr('subnets', 'defined') | subelements('subnets') }}"
      loop_control:
        loop_var: vlan_subnet
      register: _update_subnets

    - name: create subnets
      when:
        - vlan_subnet.1.cidr not in _existing_subnets.json | map(attribute='cidr')
      changed_when: true
      vars:
        all_maas_vlans: "{{ maas_network.fabrics | map(attribute='vlans') | flatten }}"
      #debug:
      #  var: vlan_subnet
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/subnets/"
        method: POST
        headers:
          Authorization: "{{ Authorization }}"
        body:
          # XXX well fuck me, ["No VLAN with vid 99 in default fabric."]
          # we need to know the fabric.
          fabric: "{{ }}"
          vid: "{{ vlan_subnet.0.id }}"
          cidr: "{{ vlan_subnet.1.cidr }}"
        body_format: json
      loop: "{{ all_maas_vlans | selectattr('subnets', 'defined') | subelements('subnets') }}"
      loop_control:
        loop_var: vlan_subnet
      register: _create_subnets

    - name: refresh existing subnets
      when: _create_subnets is changed or _update_subnets is changed or _delete_subnets is changed
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/subnets/"
        headers:
          Authorization: "{{ Authorization }}"
        return_content: true
      register: _refresh_subnets

    - name: workaround skipped refresh
      when: _refresh_subnets is not skipped
      changed_when: true
      set_fact:
        _existing_subnets: "{{ _refresh_subnets }}"

- fail:

- name: get existing ip ranges
  uri:
    url: "{{ maas_base }}/MAAS/api/2.0/ipranges/"
    headers:
      Authorization: "{{ Authorization }}"
    return_content: true
  register: _existing_ipranges

- name: manipulate ip ranges
  block:
    - name: delete ip ranges
      when: iprange | json_query(comparison_data) not in maas_network.fabrics | json_query(all_fabric_ipranges)
      changed_when: true
      vars:
        comparison_data: "{type: type, start_ip: start_ip, end_ip: end_ip}"
        all_fabric_ipranges: "*[].ip_range"
      debug:
        msg: "Delete this ip range {{ iprange }}"
      #uri:
      #  url: "{{ maas_base }}/MAAS/api/2.0/ipranges/{{ iprange.id }}/"
      #  method: DELETE
      #  headers:
      #    Authorization: "{{ Authorization }}"
      #  status_code: [200, 204]
      loop: "{{ _existing_ipranges.json }}"
      loop_control:
        loop_var: iprange
      register: _delete_iprange

    #- name: update ip ranges
    #  debug:
    #    msg: "TODO: ?"
    #  register: _update_iprange

    - name: create ip ranges
      when:
        - vlan.ip_ranges is defined
        - vlan.ip_range not in _existing_ipranges.json | json_query(comparison_list)
      changed_when: true
      vars:
        comparison_list: "[].{type: type, start_ip: start_ip, end_ip: end_ip}"
        comparison_subnet: "[?cidr==`{{ vlan.subnet }}`] | [0]"
      uri:
        url: "{{ maas_base }}/MAAS/api/2.0/ipranges/"
        method: POST
        headers:
          Authorization: "{{ Authorization }}"
        body:
          type: "{{ vlan.ip_range.type }}"
          start_ip: "{{ vlan.ip_range.start_ip }}"
          end_ip: "{{ vlan.ip_range.end_ip }}"
          subnet: "{{ (_existing_subnets.json | json_query(comparison_subnet)).id }}"
        body_format: json
        return_content: true
      loop: "{{ maas_network.fabrics[fabric].subnet | subelements(ip_ranges) }}"
      loop_control:
        loop_var: vlan
      register: _create_iprange

